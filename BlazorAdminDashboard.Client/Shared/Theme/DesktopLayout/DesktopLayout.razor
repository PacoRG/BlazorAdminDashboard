@inject IThemeMessageService<ThemeConfigData> ThemeMessageService
@inject IJSRuntime JSRuntime

<div class="dnet-desktop-layout @(IsMinified ? "minified" : null)
                                @(IsHiddenHeader ? "hidden-header" : null)
                                @(IsHiddenFooter ? "hidden-footer" : null)
                                @(IsHiddenNavigation ? "hidden-navigation" : null)
     ">
    @ChildContent
</div>

@code {

    public bool IsMinified { get; set; }
    public bool IsHiddenHeader { get; set; } = false;
    public bool IsHiddenFooter { get; set; } = false;
    public bool IsHiddenNavigation { get; set; } = false;

    public LocalStorageData LocalStorageData { get; set; } = new LocalStorageData();

    [Parameter] 
    public RenderFragment ChildContent { get; set; }

    protected override void OnInitialized()
    {

        ThemeMessageService.GetMessage().Subscribe(async p =>
        {
            //string value = JsonSerializer.ToString(p);

            if (p.Emitter == ThemeMessageEmitter.DesktopMinifyMenu)
            {

                IsMinified = p.Data.IsMinified;

                LocalStorageData.IsMinified = p.Data.IsMinified;
                await LocalStorage.SetAsync(JSRuntime, "BlazorTestApp", LocalStorageData);
            };

            IsHiddenHeader = p.Data.IsHeaderHidden;
            IsHiddenFooter = p.Data.IsFooterHidden;
            IsHiddenNavigation = p.Data.IsNavigationHidden;

            StateHasChanged();
        });
    }

    protected override async Task OnInitializedAsync()
    {

        LocalStorageData.Rights = new Rights();
        LocalStorageData.CurrentUser = new CurrentUser();

        var localStorageData = await LocalStorage.GetAsync<LocalStorageData>(JSRuntime, "BlazorTestApp");

        if (localStorageData != null)
        {

            LocalStorageData = localStorageData;
            IsMinified = LocalStorageData.IsMinified;

            StateHasChanged();
        }
    }
}